/*
Cleaning Data in SQL Queries
*/

Select *
From PorfolioProject.dbo.NashvilleHousing

-----------------------------------------------------------Standardize Data Format  

--add a new formatted data column
Alter Table NashvilleHousing
Add SaleDateConverted Date;

--convert the data column and update new formatted column in dataset
Update NashvilleHousing
Set SaleDateConverted = CONVERT(Date, SaleDate)

--show new updated formatted column
Select SaleDateConverted, CONVERT(Date, SaleDate)
From PorfolioProject.dbo.NashvilleHousing

----------------------------------------------------------Populate Property Address data
Update a
Set PropertyAddress = ISNULL(a.PropertyAddress, b.PropertyAddress)
From PorfolioProject.dbo.NashvilleHousing a
Join PorfolioProject.dbo.NashvilleHousing b
on a.ParcelID = b.ParcelID
And a.[UniqueID ] <> b.[UniqueID ]
Where a.PropertyAddress is null

Select a.ParcelID, a.PropertyAddress, b.ParcelID, b.PropertyAddress, ISNULL(a.PropertyAddress, b.PropertyAddress)
From PorfolioProject.dbo.NashvilleHousing a
Join PorfolioProject.dbo.NashvilleHousing b
on a.ParcelID = b.ParcelID
and a.[UniqueID ]<>b.[UniqueID ]
where a.PropertyAddress is null

--------------------------------------------------------Breaking out address into individual columns (address, city, state)
/*Break Property Address*/
Select 
SUBSTRING(PropertyAddress, 1, CHARINDEX(',', PropertyAddress) -1),
SUBSTRING(PropertyAddress, CHARINDEX(',', PropertyAddress) +1, len(PropertyAddress))
FROM PorfolioProject.dbo.NashvilleHousing

ALTER TABLE NashvilleHousing
ADD SplitPropertyAddress Nvarchar(255);

Update NashvilleHousing
SET SplitPropertyAddress = SUBSTRING(PropertyAddress, 1, CHARINDEX(',', PropertyAddress) -1)

ALTER TABLE NashvilleHousing
ADD SplitPropertyCity Nvarchar(255);

Update NashvilleHousing
SET SplitPropertyCity = SUBSTRING(PropertyAddress, CHARINDEX(',', PropertyAddress) +1, len(PropertyAddress))

/*Break Owner Address*/
Select
PARSENAME(REPLACE(OwnerAddress, ',', '.'), 3),
PARSENAME(REPLACE(OwnerAddress, ',', '.'), 2),
PARSENAME(REPLACE(OwnerAddress, ',', '.'), 1)
FROM PorfolioProject.dbo.NashvilleHousing;

ALTER TABLE NashvilleHousing
ADD SplitOwnerAddress Nvarchar(255);

Update NashvilleHousing
SET SplitOwnerAddress = PARSENAME(REPLACE(OwnerAddress, ',', '.'), 3)

ALTER TABLE NashvilleHousing
ADD SplitOwnerCity Nvarchar(255);

Update NashvilleHousing
SET SplitOwnerCity = PARSENAME(REPLACE(OwnerAddress, ',', '.'), 2)

ALTER TABLE NashvilleHousing
ADD SplitOwnerState Nvarchar(255);

Update NashvilleHousing
SET SplitOwnerState = PARSENAME(REPLACE(OwnerAddress, ',', '.'), 1)

Select*
From PorfolioProject.dbo.NashvilleHousing

-----------------------------------------------------------Change y and N to Yes and No in "Sold as Vacant" field
SELECT SoldAsVacant
, CASE When SoldAsVacant = 'N' THEN 'No'
     When SoldAsVacant = 'Y' THEN 'Yes'
	 ELSE SoldAsVacant
	 END
From PorfolioProject.dbo.NashvilleHousing

Select Distinct(SoldAsVacant), Count(SoldAsVacant)
From PorfolioProject.dbo.NashvilleHousing
Group by SoldAsVacant
Order by 2

----------------------------------------------------------------------Remove Duplicates
/*List all duplicated rows*/
With RowNumCTE AS(
Select *, 
	ROW_NUMBER() OVER(
	PARTITION BY ParcelID,
				 PropertyAddress,
				 SalePrice,
				 SaleDate,
				 LegalReference
				 ORDER BY
					UniqueID
					) row_num
From PorfolioProject.dbo.NashvilleHousing)
Select *
From RowNumCTE
where row_num > 1
Order by PropertyAddress

/*Delete all duplicated rows*/
With RowNumCTE AS(
Select *, 
	ROW_NUMBER() OVER(
	PARTITION BY ParcelID,
				 PropertyAddress,
				 SalePrice,
				 SaleDate,
				 LegalReference
				 ORDER BY
					UniqueID
					) row_num
From PorfolioProject.dbo.NashvilleHousing)
Delete
From RowNumCTE
where row_num > 1

----------------------------------------------------------------------------------Delete unused columns
ALTER TABLE NashvilleHousing
DROP COLUMN PropertyAddress, OwnerAddress, SaleDate, TaxDistrict

Select *
from PorfolioProject.dbo.NashvilleHousing
